using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace api.Repositories
{
    public class CampingSpotRepository : ICampingSpotRepository
    {
        private readonly CampingSpotDbContext _dbContext;

        public CampingSpotRepository(CampingSpotDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<IEnumerable<CampingSpot>> GetAllAsync()
        {
            return await _dbContext.CampingSpots.ToListAsync();
        }

        // Implement other methods for creating, updating, deleting camping spots
        // For example:

        public async Task<CampingSpot> GetByIdAsync(int id)
        {
            return await _dbContext.CampingSpots.FindAsync(id);
        }

        public async Task AddAsync(CampingSpot campingSpot)
        {
            await _dbContext.CampingSpots.AddAsync(campingSpot);
            await _dbContext.SaveChangesAsync();
        }

        public async Task UpdateAsync(CampingSpot campingSpot)
        {
            _dbContext.CampingSpots.Update(campingSpot);
            await _dbContext.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var campingSpot = await _dbContext.CampingSpots.FindAsync(id);
            if (campingSpot != null)
            {
                _dbContext.CampingSpots.Remove(campingSpot);
                await _dbContext.SaveChangesAsync();
            }
        }
    }
}

public interface IUserRepository
{
    User GetUserById(int id);
    User CreateUser(User user);
    User UpdateUser(User user);
    // Other repository methods
}

public class UserRepository : IUserRepository
{
    private readonly AppDbContext _context;

    public UserRepository(AppDbContext context)
    {
        _context = context;
    }

    public User GetUserById(int id)
    {
        return _context.Users.Find(id);
    }

    public User CreateUser(User user)
    {
        _context.Users.Add(user);
        _context.SaveChanges();
        return user;
    }

    public User UpdateUser(User user)
    {
        _context.Users.Update(user);
        _context.SaveChanges();
        return user;
    }

    // Other repository methods
}
