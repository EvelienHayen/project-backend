[Route("api/[controller]")]
[ApiController]
public class CampingSpotController : ControllerBase
{
    private readonly ICampingSpotService _campingSpotService;

    public CampingSpotController(ICampingSpotService campingSpotService)
    {
        _campingSpotService = campingSpotService;
    }

    [HttpGet]
    public async Task<IActionResult> GetC-spots()
    {
        var campingSpots = await _campingSpotService.GetAllCampingSpotsAsync();
        return Ok(campingSpots);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> spots(int id)
    {
        var campingSpot = await _campingSpotService.GetCampingSpotByIdAsync(id);
        if (campingSpot == null)
        {
            return NotFound();
        }
        return Ok(campingSpot);
    }

    [HttpPost]
    [Authorize(Roles = "Owner")]
    public async Task<IActionResult> CreateCampingSpot(CampingSpotDto campingSpotDto)
    {
        var campingSpot = await _campingSpotService.CreateCampingSpotAsync(campingSpotDto);
        return CreatedAtAction(nameof(GetCampingSpot), new { id = campingSpot.Id }, campingSpot);
    }

    [HttpPut("{id}")]
    [Authorize(Roles = "Owner")]
    public async Task<IActionResult> UpdateCampingSpot(int id, CampingSpotDto campingSpotDto)
    {
        if (id != campingSpotDto.Id)
        {
            return BadRequest();
        }

        var campingSpot = await _campingSpotService.UpdateCampingSpotAsync(id, campingSpotDto);
        if (campingSpot == null)
        {
            return NotFound();
        }

        return NoContent();
    }

    [HttpDelete("{id}")]
    [Authorize(Roles = "Owner")]
    public async Task<IActionResult> DeleteCampingSpot(int id)
    {
        var result = await _campingSpotService.DeleteCampingSpotAsync(id);
        if (!result)
        {
            return NotFound();
        }

        return NoContent();
    }
}

[Route("api/[controller]")]
[ApiController]
public class BookingController : ControllerBase
{
    private readonly IBookingService _bookingService;

    public BookingController(IBookingService bookingService)
    {
        _bookingService = bookingService;
    }

    [HttpGet]
    [Authorize]
    public async Task<IActionResult> GetBookings()
    {
        var userId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var bookings = await _bookingService.GetBookingsByUserIdAsync(userId);
        return Ok(bookings);
    }

    [HttpPost]
    [Authorize]
    public async Task<IActionResult> CreateBooking(BookingDto bookingDto)
    {
        var userId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var booking = await _bookingService.CreateBookingAsync(userId, bookingDto);
        return CreatedAtAction(nameof(GetBooking), new { id = booking.Id }, booking);
    }

    [HttpGet("{id}")]
    [Authorize]
    public async Task<IActionResult> GetBooking(int id)
    {
        var userId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var booking = await _bookingService.GetBookingByIdAsync(userId, id);
        if (booking == null)
        {
            return NotFound();
        }
        return Ok(booking);
    }

    [HttpPut("{id}")]
    [Authorize]
    public async Task<IActionResult> UpdateBooking(int id, BookingDto bookingDto)
    {
        var userId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (id != bookingDto.Id)
        {
            return BadRequest();
        }

        var booking = await _bookingService.UpdateBookingAsync(userId, id, bookingDto);
        if (booking == null)
        {
            return NotFound();
        }

        return NoContent();
    }

    [HttpDelete("{id}")]
    [Authorize]
    public async Task<IActionResult> DeleteBooking(int id)
    {
        var userId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var result = await _bookingService.DeleteBookingAsync(userId, id);
        if (!result)
        {
            return NotFound();
        }

        return NoContent();
    }
}


[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase
{
    private readonly IUserService _userService;

    public UserController(IUserService userService)
    {
        _userService = userService;
    }

    [HttpGet("{id}")]
    public IActionResult GetUserById(int id)
    {
        var user = _userService.GetUserById(id);
        if (user == null)
            return NotFound();
        return Ok(user);
    }

    [HttpPost]
    public IActionResult CreateUser([FromBody] UserDto userDto)
    {
        var user = _userService.CreateUser(userDto);
        return CreatedAtAction(nameof(GetUserById), new { id = user.Id }, user);
    }

    [HttpPut("{id}")]
    public IActionResult UpdateUser(int id, [FromBody] UserDto userDto)
    {
        var updatedUser = _userService.UpdateUser(id, userDto);
        if (updatedUser == null)
            return NotFound();
        return Ok(updatedUser);
    }
}


[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly IAuthService _authService;

    public AuthController(IAuthService authService)
    {
        _authService = authService;
    }

    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginDto loginDto)
    {
        var token = _authService.Login(loginDto);
        if (token == null)
            return Unauthorized();
        return Ok(new { Token = token });
    }

    [HttpPost("register")]
    public IActionResult Register([FromBody] RegisterDto registerDto)
    {
        var user = _authService.Register(registerDto);
        return CreatedAtAction(nameof(UserController.GetUserById), new { id = user.Id }, user);
    }

    [HttpPost("passwordreset")]
    public IActionResult PasswordReset([FromBody] PasswordResetDto passwordResetDto)
    {
        _authService.ResetPassword(passwordResetDto);
        return NoContent();
    }
}


